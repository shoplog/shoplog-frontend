/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/vehicles': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get a list of vehicles */
		get: operations['getVehicles'];
		put?: never;
		/** Create a new vehicle */
		post: operations['createVehicle'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/vpic/vin/{vin}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Search for a vehicle by VIN */
		get: operations['getVPICVin'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/vpic/years': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get a list of supported vehicle years */
		get: operations['getVPICYears'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/vpic/years/{year}/makes': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get a list of supported vehicle makes by year */
		get: operations['getVPICYearMakes'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/vpic/makes/{makeId}/year/{year}/models': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get a list of supported vehicle models by make and year */
		get: operations['getVPICMYearMakeModels'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/vpic/models/{modelId}/year/{year}/attributes': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get a list of supported vehicle attributes by model ID and year */
		get: operations['getVPICModelAttributesByModelIdAndYear'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/services': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get a list of services */
		get: operations['getServices'];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	'/maintenance-logs/{vehicleId}': {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get a list of maintenance logs */
		get: operations['getMaintenanceLogs'];
		put?: never;
		/** Create a new maintenance log */
		post: operations['createMaintenanceLog'];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		MaintenanceLog: {
			/**
			 * Format: int32
			 * @description The unique identifier for the maintenance log
			 */
			id: number;
			/** @description The unique identifier for the user who owns this maintenance log */
			userId: string;
			/**
			 * Format: int32
			 * @description The unique identifier for the vehicle associated with this maintenance log
			 */
			vehicleId: number;
			/**
			 * Format: date-time
			 * @description The unique identifier for the service associated with this maintenance log
			 */
			serviceDate: string;
			/** @description The notes of the maintenance log */
			notes?: string | null;
			/**
			 * Format: int32
			 * @description The mileage of the vehicle when the maintenance log was created
			 */
			mileage: number;
			/**
			 * Format: date-time
			 * @description The date and time the maintenance log was created
			 */
			createdAt: string;
			/**
			 * Format: date-time
			 * @description The date and time the maintenance log was last updated
			 */
			updatedAt: string;
			/** @description The unique identifiers for the services associated with this maintenance log */
			serviceIds?: number[];
			/** @description The unique identifier for the service shop associated with this maintenance log */
			serviceShopId?: number | null;
		};
		CreateMaintenanceLog: {
			/**
			 * Format: date-time
			 * @description The unique identifier for the service associated with this maintenance log
			 */
			serviceDate: string;
			/** @description The notes of the maintenance log */
			notes?: string | null;
			/**
			 * Format: int32
			 * @description The mileage of the vehicle when the maintenance log was created
			 */
			mileage: number;
			/** @description The unique identifiers for the services associated with this maintenance log */
			serviceIds?: number[];
		};
		Service: {
			/**
			 * Format: int32
			 * @description The unique identifier for the service
			 */
			id: number;
			/** @description The unique identifier for the user who owns this service */
			userId?: string | null;
			/** @description The name of the service */
			name: string;
			/** @description The description of the service */
			description?: string | null;
			/**
			 * Format: date-time
			 * @description The date and time the service was created
			 */
			createdAt: string;
			/**
			 * Format: date-time
			 * @description The date and time the service was last updated
			 */
			updatedAt: string;
		};
		Vehicle: {
			/**
			 * Format: int32
			 * @description The unique identifier for the vehicle
			 */
			id: number;
			/** @description The unique identifier for the user who owns this vehicle */
			userId: string;
			/** @description The make of the vehicle */
			make: string;
			/** @description The model of the vehicle */
			model: string;
			/**
			 * Format: int32
			 * @description The year of the vehicle
			 */
			year: number;
			/** @description The Vehicle Identification Number */
			vin?: string | null;
			/** @description The license plate of the vehicle */
			plate?: string | null;
			/** @description The color of the vehicle */
			color?: string | null;
			/**
			 * Format: int32
			 * @description The mileage of the vehicle
			 */
			mileage: number;
			/**
			 * @description The unit of the mileage
			 * @enum {string}
			 */
			mileageDistanceUnit: 'KM' | 'MI';
			/**
			 * Format: date-time
			 * @description The date and time the vehicle was created
			 */
			createdAt?: string;
			/**
			 * Format: date-time
			 * @description The date and time the vehicle was last updated
			 */
			updatedAt?: string;
			/** @description The attributes of the vehicle */
			attributes?: components['schemas']['VehicleAttribute'][];
		};
		VehicleCreateRequestBody: {
			/** @description The make of the vehicle */
			make: string;
			/** @description The model of the vehicle */
			model: string;
			/**
			 * Format: int32
			 * @description The year of the vehicle
			 */
			year: number;
			/** @description The Vehicle Identification Number */
			vin?: string | null;
			/** @description The license plate of the vehicle */
			plate?: string | null;
			/** @description The color of the vehicle */
			color?: string | null;
			/**
			 * Format: int32
			 * @description The mileage of the vehicle
			 */
			mileage: number;
			/**
			 * @description The unit of the mileage
			 * @enum {string}
			 */
			mileageDistanceUnit: 'KM' | 'MI';
			/** @description The attributes of the vehicle */
			attributes?: components['schemas']['VehicleAttribute'][];
		};
		VehicleAttribute: {
			/** @description The code of the attribute */
			code: string;
			/** @description The name of the attribute */
			name: string;
			/** @description The value of the attribute */
			value: string;
		};
		/** @description A vehicle search result */
		VPICVinResponseBody: {
			/**
			 * @description Vehicle Identification Number
			 * @example 5TEWN72N82Z891171
			 */
			vin: string;
			/**
			 * @description Suggested Vehicle Identification Number
			 * @example 5TEWN72N82Z891171
			 */
			suggestedVin?: string;
			/**
			 * Format: int32
			 * @description Vehicle make ID
			 * @example 1
			 */
			makeId: number;
			/**
			 * @description Vehicle make
			 * @example Toyota
			 */
			make: string;
			/**
			 * Format: int32
			 * @description Vehicle model ID
			 * @example 1
			 */
			modelId: number;
			/**
			 * @description Vehicle model
			 * @example Tacoma
			 */
			model: string;
			/**
			 * Format: int32
			 * @description Vehicle year
			 * @example 2002
			 */
			year: number;
			/** @description Vehicle attributes */
			attributes?: {
				[key: string]: string | number;
			};
		};
		/**
		 * @description A list of vehicle years
		 * @example [
		 *       2000,
		 *       2001,
		 *       2002
		 *     ]
		 */
		VPICYearsResponseBody: number[];
		/** @description A list of vehicle makes */
		VPICMakesResponseBody: components['schemas']['Lookup'][];
		/** @description A list of vehicle models */
		VPICModelsResponseBody: components['schemas']['Lookup'][];
		/** @description A list of vehicle model attributes */
		VPICModelAttributesResponseBody: {
			/** @description The code of the attribute */
			code: string;
			/** @description The name of the attribute */
			name: string;
			/** @description The description of the attribute */
			description: string;
			/** @description The values of the attribute */
			values: {
				/**
				 * Format: int32
				 * @description The unique identifier for a value
				 */
				id: number | null;
				value: string | number;
				/** @description The VIN schema identifiers */
				vinSchemaIds: number[];
			}[];
		}[];
		Lookup: {
			/**
			 * Format: int32
			 * @description The unique identifier for a lookup
			 */
			id: number;
			/** @description The name of the lookup */
			name: string;
		};
		/** @description A Problem Details object (RFC 9457) */
		Problem: {
			/**
			 * @description URI reference that identifies the problem type
			 * @default about:blank
			 */
			type: string;
			/**
			 * Format: int32
			 * @description HTTP status code generated by the origin server for this occurrence of the problem
			 */
			status: number;
			/** @description A short, human-readable summary of the problem type */
			title: string;
			/** @description A human-readable explanation specific to this occurrence of the problem */
			detail?: string;
			/**
			 * Format: uri
			 * @description URI reference that identifies the specific occurrence of the problem
			 */
			instance?: string;
		} & {
			[key: string]: unknown;
		};
		/** @example {
		 *       "type": "about:blank",
		 *       "status": 400,
		 *       "title": "One or more validation errors occurred",
		 *       "errors": [
		 *         {
		 *           "name": "publicAddress",
		 *           "reason": "Public address is required"
		 *         },
		 *         {
		 *           "name": "signature",
		 *           "reason": "Signature is required"
		 *         }
		 *       ]
		 *     } */
		ValidationProblem: {
			/** @description A list of validation errors */
			errors?: components['schemas']['ValidationError'][];
		} & components['schemas']['Problem'];
		ValidationError: {
			/** @description The name of the field that caused the error */
			name?: string;
			/** @description The reason why the field caused the error */
			reason?: string;
		};
	};
	responses: {
		/** @description Request cannot be processed due to malformed request syntax */
		400: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/problem+json': components['schemas']['ValidationProblem'];
			};
		};
		/** @description Request was not processed due to authentication failure */
		401: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/problem+json': components['schemas']['Problem'];
			};
		};
		/** @description Request was not processed due to authorization failure */
		403: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/problem+json': components['schemas']['Problem'];
			};
		};
		/** @description Request was not processed due to resource not found */
		404: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/problem+json': components['schemas']['Problem'];
			};
		};
		/** @description Request was formed correctly but errors ocurred during processing */
		422: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/problem+json': components['schemas']['Problem'];
			};
		};
		/** @description Request was not processed due to an internal server error */
		500: {
			headers: {
				[name: string]: unknown;
			};
			content: {
				'application/problem+json': components['schemas']['Problem'];
			};
		};
	};
	parameters: {
		/**
		 * @description Vehicle Identification Number
		 * @example 5TEWN72N82Z891171
		 */
		vin: string;
		/**
		 * @description Vehicle make ID
		 * @example 1
		 */
		makeId: number;
		/**
		 * @description Vehicle model ID
		 * @example 1
		 */
		modelId: number;
		/**
		 * @description Vehicle year
		 * @example 2002
		 */
		year: number;
	};
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	getVehicles: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Vehicles found */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Vehicle'][];
				};
			};
			401: components['responses']['401'];
			403: components['responses']['403'];
			404: components['responses']['404'];
			500: components['responses']['500'];
		};
	};
	createVehicle: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['VehicleCreateRequestBody'];
			};
		};
		responses: {
			/** @description Vehicle created */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Vehicle'];
				};
			};
			400: components['responses']['400'];
			401: components['responses']['401'];
			403: components['responses']['403'];
			404: components['responses']['404'];
			422: components['responses']['422'];
			500: components['responses']['500'];
		};
	};
	getVPICVin: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Vehicle Identification Number
				 * @example 5TEWN72N82Z891171
				 */
				vin: components['parameters']['vin'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Vehicle found */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['VPICVinResponseBody'];
				};
			};
			400: components['responses']['400'];
			401: components['responses']['401'];
			403: components['responses']['403'];
			404: components['responses']['404'];
			422: components['responses']['422'];
			500: components['responses']['500'];
		};
	};
	getVPICYears: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Vehicle years found */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['VPICYearsResponseBody'];
				};
			};
			401: components['responses']['401'];
			403: components['responses']['403'];
			404: components['responses']['404'];
			422: components['responses']['422'];
			500: components['responses']['500'];
		};
	};
	getVPICYearMakes: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Vehicle year
				 * @example 2002
				 */
				year: components['parameters']['year'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Vehicle makes found */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['VPICMakesResponseBody'];
				};
			};
			401: components['responses']['401'];
			403: components['responses']['403'];
			404: components['responses']['404'];
			422: components['responses']['422'];
			500: components['responses']['500'];
		};
	};
	getVPICMYearMakeModels: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Vehicle year
				 * @example 2002
				 */
				year: components['parameters']['year'];
				/**
				 * @description Vehicle make ID
				 * @example 1
				 */
				makeId: components['parameters']['makeId'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Vehicle models found */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['VPICModelsResponseBody'];
				};
			};
			401: components['responses']['401'];
			403: components['responses']['403'];
			404: components['responses']['404'];
			422: components['responses']['422'];
			500: components['responses']['500'];
		};
	};
	getVPICModelAttributesByModelIdAndYear: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description Vehicle model ID
				 * @example 1
				 */
				modelId: components['parameters']['modelId'];
				/**
				 * @description Vehicle year
				 * @example 2002
				 */
				year: components['parameters']['year'];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Vehicle attributes found */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['VPICModelAttributesResponseBody'];
				};
			};
			401: components['responses']['401'];
			403: components['responses']['403'];
			404: components['responses']['404'];
			422: components['responses']['422'];
			500: components['responses']['500'];
		};
	};
	getServices: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Services found */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['Service'][];
				};
			};
			401: components['responses']['401'];
			403: components['responses']['403'];
			404: components['responses']['404'];
			500: components['responses']['500'];
		};
	};
	getMaintenanceLogs: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Vehicle ID */
				vehicleId: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Maintenance logs found */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['MaintenanceLog'][];
				};
			};
			401: components['responses']['401'];
			403: components['responses']['403'];
			404: components['responses']['404'];
			500: components['responses']['500'];
		};
	};
	createMaintenanceLog: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Vehicle ID */
				vehicleId: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateMaintenanceLog'];
			};
		};
		responses: {
			/** @description Maintenance log created */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					'application/json': components['schemas']['MaintenanceLog'];
				};
			};
			400: components['responses']['400'];
			401: components['responses']['401'];
			403: components['responses']['403'];
			404: components['responses']['404'];
			422: components['responses']['422'];
			500: components['responses']['500'];
		};
	};
}
